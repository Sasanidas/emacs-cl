Mapping from Emacs Lisp object types to Common Lisp object types:

EL type			CL type
bool-vector		simple-bit-vector
compiled-function	compiled-function
cons			cons
float			single-float
hash-table		hash-table
integer			fixnum
string			simple-string
subr			compiled-function
symbol			symbol
vector			various, type in first element

Common Lisp objects represented by Emacs Lisp vectors:

bignum			[BIGNUM <n0> <n1> ...]
ratio			[RATIO <numerator> <denominator>]
complex			[COMPLEX <realpart> <imagpart>]
character		[CHARACTER <code>]
string			[STRING <fill-pointer> <string> <offset>]
char-array		[char-array <dimensions> <elements> <offset>]
bit-vector		[BIT-VECTOR <fill-pointer> <elements> <offset>]
bit-array		[bit-array <dimensions> <elements> <offset>]
simple-vector		[SIMPLE-VECTOR <elt> ...]
vector			[VECTOR <fill-pointer> <elements> <offset>]
array			[ARRAY <dimensions> <elements> <offset>]
interpreted-function	[INTERPRETED-FUNCTION <fn> <env>]
instance of type T	[T <slot> ...]



Emacs features wish list:

 * Hash tables.  Done in later versions.

 * Weak hash tables.  Done in later versions.

 * A function that returns the address of an object, for implementing
   print-unreadable-object :identity t.

 * A function that returns the amount of processor time used, for
   implementing get-internal-run-time.



There are problems with the cl:function macro when its output appears
in compiled files:

 * When applied to a byte-code function the result will be printed
   with the #[...] syntax.  That works, but separate invokations of
   cl:function will result in distinct, though equal, code vectors.

 * When's applied to a subr, the result will be printed with the
   #<subr ...> syntax, which will raise a syntax error when loaded.

In generall, Emacs' byte compiler doesn't preserve object identity,
which is a problem.
