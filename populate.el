;;;; -*- emacs-lisp -*-
;;;
;;; Copyright (C) 2003 Lars Brinkhoff.
;;; This file does the final work of setting up packages.

(IN-PACKAGE "EMACS-CL")

(defun populate-packages ()
  (let ((emacs-cl-table (make-hash-table :test 'equal)))
    (aset *emacs-cl-package* 3 nil)		;shadowing symbols
    (aset *emacs-cl-package* 6 emacs-cl-table)	;hash table
    (aset *emacs-cl-package* 7 nil)		;exported symbols

    (dolist (sym '(&ALLOW-OTHER-KEYS &AUX &BODY &ENVIRONMENT &KEY &OPTIONAL
&REST &WHOLE *FEATURES* *GENSYM-COUNTER* *MACROEXPAND-HOOK* *PACKAGE*
*READ-BASE* *READ-EVAL* *READTABLE* ABS ACONS ADJUST-ARRAY ADJUSTABLE-ARRAY-P
ALPHA-CHAR-P ALPHANUMERICP AND APPEND APPLY AREF ARRAY ARRAY-DIMENSION
ARRAY-DIMENSIONS ARRAY-ELEMENT-TYPE ARRAY-HAS-FILL-POINTER-P ARRAYP ASH ASSOC
ASSOC-IF ASSOC-IF-NOT ATAN ATOM BASE-CHAR BASE-STRING BIGNUM BIT BIT-VECTOR
BIT-VECTOR-P BLOCK BOOLEAN BOUNDP BUTLAST BYTE BYTE-POSITION BYTE-SIZE CAR
CAAAAR CAAADR CAAAR CAADAR CAADDR CAADR CAAR CADAAR CADADR CADAR CADDAR CADDDR
CADDR CADR CATCH CHAR CDAAAR CDAADR CDAAR CDADAR CDADDR CDADR CDAR CDDAAR
CDDADR CDDAR CDDDAR CDDDDR CDDDR CDDR CDR CHAR-CODE CHAR-CODE-LIMIT
CHAR-DOWNCASE CHAR-NAME CHAR-UPCASE CHAR= CHARACTER CHARACTERP CHECK-TYPE CLOSE
CODE-CHAR COERCE COMPILED-FUNCTION COMPILED-FUNCTION-P COMPILER-MACRO-FUNCTION
COMPLEMENT COMPLEX COMPLEXP CONCATENATE CONJUGATE CONS CONSP COPY-ALIST
COPY-LIST COPY-READTABLE COPY-SEQ COPY-STRUCTURE COPY-SYMBOL COPY-TREE
DEFCONSTANT DEFINE-COMPILER-MACRO DEFINE-SETF-EXPANDER DEFINE-SYMBOL-MACRO
DEFMACRO DEFPACKAGE DEFSETF DEFSTRUCT DEFTYPE DEFUN DELETE-PACKAGE DENOMINATOR
DEPOSIT-FIELD DIGIT-CHAR-P DO-SYMBOLS FIFTH DOUBLE-FLOAT DPB ELT EQ EQL EQUAL
EVAL-WHEN EXTENDED-CHAR EIGHTH EXPORT FDEFINITION FILE-POSITION
FIND-ALL-SYMBOLS FIND-PACKAGE FIND-SYMBOL FIRST FIXNUM FLET FLOAT FOURTH
FUNCALL FUNCTION FUNCTIONP GENSYM GENTEMP GET GET-DISPATCH-MACRO-CHARACTER
GET-MACRO-CHARACTER GET-SETF-EXPANSION GET-OUTPUT-STREAM-STRING GET-PROPERTIES
GETF GO HASH-TABLE IDENTITY IF IMAGPART IMPORT IN-PACKAGE INTEGER
INTEGER-LENGTH INTEGERP INTERN KEYWORD KEYWORDP LABELS LAST LDB LDB-TEST LENGTH
LET LET* LISP-IMPLEMENTATION-TYPE LISP-IMPLEMENTATION-VERSION LIST LIST*
LIST-ALL-PACKAGES LIST-LENGTH LISTP LOAD-TIME-VALUE LOCALLY LOGAND LOGANDC1
LOGANDC2 LOGBITP LOGCOUNT LOGEQV LOGIOR LOGNAND LOGNOR LOGNOT LOGORC1 LOGORC2
LOGTEST LOGXOR LONG-FLOAT LOWER-CASE-P MACRO-FUNCTION MACROEXPAND MACROEXPAND-1
MACROLET MAKE-ARRAY MAKE-LIST MAKE-PACKAGE MAKE-SYMBOL MAKE-STRING
MAKE-STRING-INPUT-STREAM MAKE-STRING-OUTPUT-STREAM MAKUNBOUND MAP MAPCAN MAPCAR
MASK-FIELD MAX MEMBER MIN MINUSP MOD MOST-NEGATIVE-FIXNUM MOST-POSITIVE-FIXNUM
MULTIPLE-VALUE-CALL MULTIPLE-VALUE-PROG1 NAME-CHAR NBUTLAST NCONC NINTH NOT
NRECONC NSUBLIS NSUBST NSUBST-IF NSUBST-IF-NOT NTH NULL NUMBER NUMBERP
NUMERATOR OPEN OR PACKAGE PACKAGE-NAME PACKAGE-NICKNAMES
PACKAGE-SHADOWING-SYMBOLS PACKAGE-USE-LIST PACKAGE-USED-BY-LIST PACKAGEP
PAIRLIS PARSE-INTEGER PEEK-CHAR PHASE PRIN1 PRINT PROGN PROGV QUOTE RANDOM
RASSOC RASSOC-IF RASSOC-IF-NOT RATIO RATIONAL RATIONALP READ-CHAR
READ-DELIMITED-LIST READ-FROM-STRING READ-LINE READ-PRESERVING-WHITESPACE
READTABLE READTABLE-CASE READTABLEP REAL REALP REALPART REMPROP RETURN-FROM
RPLACA RPLACD SCHAR SECOND SET SET-DISPATCH-MACRO-CHARACTER SET-MACRO-CHARACTER
SET-SYNTAX-FROM-CHAR SETF SETQ SEVENTH SHADOW SHORT-FLOAT SIMPLE-BIT-VECTOR
SIMPLE-BIT-VECTOR-P SIMPLE-STRING SIMPLE-STRING-P SIMPLE-VECTOR SIMPLE-VECTOR-P
SINGLE-FLOAT SIGNED-BYTE SIXTH SPECIAL-OPERATOR-P STANDARD-CHAR STRING= STRING
STRINGP SUBLIS SUBST SUBST-IF SUBST-IF-NOT SUBTYPEP SYMBOL SYMBOL-FUNCTION
SYMBOL-MACROLET SYMBOL-NAME SYMBOL-PACKAGE SYMBOL-PLIST SYMBOL-VALUE SYMBOLP T
TAGBODY TENTH TERPRI THE THIRD THROW TREE-EQUAL TYPE-OF TYPEP UNREAD-CHAR
UNSIGNED-BYTE UNUSE-PACKAGE UNWIND-PROTECT UPGRADED-ARRAY-ELEMENT-TYPE
UPGRADED-COMPLEX-PART-TYPE UPPER-CASE-P USE-PACKAGE UNINTERN VALUES VECTOR
VECTORP WITH-INPUT-FROM-STRING WITH-OPEN-FILE WITH-OPEN-STREAM WRITE-CHAR
WRITE-LINE WRITE-STRING ZEROP))
      (setf (gethash (SYMBOL-NAME sym) emacs-cl-table) sym)
      (setf (SYMBOL-PACKAGE sym) *emacs-cl-package*))

    ;; NIL is a special case, because its Emacs Lisp symbol-name isn't
    ;; equal to its Common Lisp SYMBOL-NAME.
    (setf (gethash "NIL" (package-table *emacs-cl-package*)) nil)
    (setf (SYMBOL-PACKAGE nil) *emacs-cl-package*)

    ;; Internal symbols.
    (dolist (sym '(BACKQUOTE COMMA COMMA-AT COMMA-DOT INTERPRETED-FUNCTION
		   INTERPRETED-FUNCTION-P))
      (setf (gethash (SYMBOL-NAME sym) emacs-cl-table) sym)
      (setf (SYMBOL-PACKAGE sym) *emacs-cl-package*))

    ;; Symbols prefixed with "cl:" in Emacs Lisp.
    (dolist (name '("=" "/=" "<" ">" "<=" ">=" "*" "+" "-" "/" "1+" "1-"))
      (let ((to (make-symbol name))
	    (from (intern (concat "cl:" name))))
	(setf (gethash name emacs-cl-table) to)
	(setf (SYMBOL-PACKAGE to) *emacs-cl-package*)
	(if (boundp from)
	    (set to (symbol-value from)))
	(fset to (symbol-function from))))

    (dolist (sym '(** *** ++ +++ // ///))
      (setf (gethash (symbol-name sym) emacs-cl-table) sym)
      (setf (SYMBOL-PACKAGE sym) *emacs-cl-package*)
      (set sym nil))

    (setq *global-environment*
	  (vector 'environment nil nil nil nil nil))))


;;; Local variables:
;;; fill-column: 79
;;; End:
